!function(e){var t={};function o(n){if(t[n])return t[n].exports;var r=t[n]={i:n,l:!1,exports:{}};return e[n].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=t,o.d=function(e,t,n){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)o.d(n,r,function(t){return e[t]}.bind(null,r));return n},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="js",o(o.s=1)}([function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mtToggle=t.addClass=t.removeClass=void 0,t.removeClass=function(e){for(var t=[],o=1;o<arguments.length;o++)t[o-1]=arguments[o];var n=document.querySelectorAll(e);n.forEach((function(e){for(var o=0,n=t;o<n.length;o++){var r=n[o];e.classList.remove(r)}}))},t.addClass=function(e){for(var t=[],o=1;o<arguments.length;o++)t[o-1]=arguments[o];var n=document.querySelectorAll(e);n.forEach((function(e){for(var o=0,n=t;o<n.length;o++){var r=n[o];e.classList.add(r)}}))},t.mtToggle=function(){document.querySelectorAll(".mttoggle").forEach((function(e){e.addEventListener("click",(function(){e.querySelectorAll("[data-toggle]").forEach((function(e){var t=e.getAttribute("data-toggle");t&&e.classList.toggle(t)}))}))}))}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=o(2),r=o(0),u=o(3);n.mtbox1(),r.mtToggle(),u.topMenu(),u.topMenuSearch(),console.log("dziala!")},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.mtbox1=void 0;var n=o(0);t.mtbox1=function(){document.querySelectorAll("#mtbox1 .btn").forEach((function(e){e.addEventListener("click",(function(){var e=this.getAttribute("data-index");n.addClass("#mtbox1 .btn","btn-outline-white"),n.removeClass("#mtbox1 .btn","btn-white","mtbtn--white"),n.addClass('#mtbox1 .btn[data-index="'+e+'"]',"btn-white","mtbtn--white"),n.removeClass("#mtbox1 .mtbox1__btn-content","active"),n.addClass('#mtbox1 .mtbox1__btn-content[data-index="'+e+'"]',"active")}))}))}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.topMenu=t.topMenuSearch=void 0,t.topMenuSearch=function(){var e=document.querySelector(".mttopmenu__ul"),t=document.querySelector(".mttopmenu__searchform"),o=document.querySelector(".mttopmenu__searchform .mttopmenu__searchforminput"),n=document.querySelector(".mttopmenu__searchform .mttopmenu__searchformbutton"),r=!1,u=window.innerWidth;e&&t&&o&&n?(u>=768&&(t.addEventListener("click",(function(e){e.preventDefault()})),n.addEventListener("click",(function(e){r?(console.log("form submited"),t.submit(),t.reset()):(console.log("closed => opend"),r=!0,o.classList.add("mtactive"),o.focus())}))),document.addEventListener("click",(function(e){e&&(t.contains(e.target)?console.log("inside"):(console.log("outside"),r=!1,o.classList.remove("mtactive")))}))):console.log("FALSE returned by => (menu && form && input && button)")},t.topMenu=function(){var e=document.querySelector(".mttopmenu"),t=document.querySelectorAll(".mttopmenu__ul li"),o=Number(e.getAttribute("data-mtdelay"))||200,n=Number(e.getAttribute("data-mtfade-duration"))||600;t.forEach((function(e){var t,r;e.addEventListener("mouseover",(function(){this.classList.add("mtactive"),this.classList.remove("mtfade"),clearTimeout(t),clearTimeout(r)})),e.addEventListener("mouseleave",(function(){var e=this;t=setTimeout((function(){e.classList.add("mtfade")}),o),r=setTimeout((function(){e.classList.remove("mtactive","mtfade")}),o+n)}))}))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,